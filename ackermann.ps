% Don't forget to document your code - brief description, inputs, outputs, and example usage
% Author: Roman Wendelboe
% Effect: Mimics the Ackermann function
% Example: 1 3 ackermann
/ackermann 
{	
	2 dict 		%Create local dictionary 
	begin
	/n exch def %Define the second thing on the stack to be n
	/m exch def %Define top of the stack to be m 
	
	m 0 eq  									 % compare the top of the stack with zero
	{ n 1 add} 									 %if top equals zero add 1 to n
	{m 0 gt n 0 eq  and 						 %compare m to see if its greater than zero and if n is equal to zero
		{m 1 sub 1 ackermann} 					 %if m > 0 and n = 0 than we subtract 1 from am make that the new parameter along with 1 calling the ackermann recursively 
		{m 1 sub m  n 1 sub ackermann ackermann} %recursively call ackermann again passing it new parameters like this ackermann(m-1, ackermann(m, n-1))
		ifelse}
	ifelse
	end
	
} def
